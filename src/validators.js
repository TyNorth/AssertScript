// THIS FILE IS AUTO-GENERATED BY ASSERTIFY. DO NOT EDIT.
// Generated at 2025-06-16T16:09:46.505Z

let validateUser, validateSeller, validateProduct;

function _validateUser(data, options = {}) {
  const isVerbose = options.verbose === true;
  const errors = [];
  if (typeof data !== 'object' || data === null) {
    const message = 'User must be a non-null object.';
    if (isVerbose) return { isValid: false, errors: [{ property: null, rule: 'type', message }], value: undefined };
    else throw new Error(message);
  }

  const sanitizedValue = { ...data };

  // --- Validation for property: id ---
  if (sanitizedValue.hasOwnProperty('id')) {
    if (typeof sanitizedValue.id !== 'number') { if (isVerbose) { errors.push({ property: 'id', rule: 'type', message: `expected final type 'number' but got '${typeof sanitizedValue.id}'`, value: sanitizedValue.id }); } else { throw new Error(`Validation failed for User.id: expected final type 'number' but got '${typeof sanitizedValue.id}'`); } }
    else {
      if (!Number.isInteger(sanitizedValue.id)) { if (isVerbose) { errors.push({ property: 'id', rule: 'isInteger', message: `must be an integer.`, value: sanitizedValue.id }); } else { throw new Error(`Validation failed for User.id: must be an integer.`); } }
    }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'id', rule: 'required', message: `is a required property.`, value: sanitizedValue.id }); } else { throw new Error(`Validation failed for User.id: is a required property.`); }
  }

  // --- Validation for property: username ---
  if (sanitizedValue.hasOwnProperty('username')) {
    if(typeof sanitizedValue.username === 'string') sanitizedValue.username = sanitizedValue.username.trim();
    if(typeof sanitizedValue.username === 'string') sanitizedValue.username = sanitizedValue.username.toLowerCase();
    if (typeof sanitizedValue.username !== 'string') { if (isVerbose) { errors.push({ property: 'username', rule: 'type', message: `expected final type 'string' but got '${typeof sanitizedValue.username}'`, value: sanitizedValue.username }); } else { throw new Error(`Validation failed for User.username: expected final type 'string' but got '${typeof sanitizedValue.username}'`); } }
    else {
      if (String(sanitizedValue.username).length < 3) { if (isVerbose) { errors.push({ property: 'username', rule: 'minLength', message: `must be at least 3 characters long.`, value: sanitizedValue.username }); } else { throw new Error(`Validation failed for User.username: must be at least 3 characters long.`); } }
    }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'username', rule: 'required', message: `is a required property.`, value: sanitizedValue.username }); } else { throw new Error(`Validation failed for User.username: is a required property.`); }
  }

  // --- Validation for property: email ---
  if (sanitizedValue.hasOwnProperty('email')) {
    if(typeof sanitizedValue.email === 'string') sanitizedValue.email = sanitizedValue.email.trim();
    if (typeof sanitizedValue.email !== 'string') { if (isVerbose) { errors.push({ property: 'email', rule: 'type', message: `expected final type 'string' but got '${typeof sanitizedValue.email}'`, value: sanitizedValue.email }); } else { throw new Error(`Validation failed for User.email: expected final type 'string' but got '${typeof sanitizedValue.email}'`); } }
    else {
      if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(sanitizedValue.email)) { if (isVerbose) { errors.push({ property: 'email', rule: 'pattern', message: `does not match required format.`, value: sanitizedValue.email }); } else { throw new Error(`Validation failed for User.email: does not match required format.`); } }
    }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'email', rule: 'required', message: `is a required property.`, value: sanitizedValue.email }); } else { throw new Error(`Validation failed for User.email: is a required property.`); }
  }

  // --- Validation for property: age ---
  if (sanitizedValue.hasOwnProperty('age')) {
    if (typeof sanitizedValue.age !== 'number') { if (isVerbose) { errors.push({ property: 'age', rule: 'type', message: `expected final type 'number' but got '${typeof sanitizedValue.age}'`, value: sanitizedValue.age }); } else { throw new Error(`Validation failed for User.age: expected final type 'number' but got '${typeof sanitizedValue.age}'`); } }
    else {
      if (sanitizedValue.age < 18) { if (isVerbose) { errors.push({ property: 'age', rule: 'min', message: `must be at least 18.`, value: sanitizedValue.age }); } else { throw new Error(`Validation failed for User.age: must be at least 18.`); } }
      if (!Number.isInteger(sanitizedValue.age)) { if (isVerbose) { errors.push({ property: 'age', rule: 'isInteger', message: `must be an integer.`, value: sanitizedValue.age }); } else { throw new Error(`Validation failed for User.age: must be an integer.`); } }
    }
  } else if (!true) {
    if (isVerbose) { errors.push({ property: 'age', rule: 'required', message: `is a required property.`, value: sanitizedValue.age }); } else { throw new Error(`Validation failed for User.age: is a required property.`); }
  }

  // --- Validation for property: status ---
  if (sanitizedValue.hasOwnProperty('status')) {
    if (typeof sanitizedValue.status !== 'string') { if (isVerbose) { errors.push({ property: 'status', rule: 'type', message: `expected final type 'string' but got '${typeof sanitizedValue.status}'`, value: sanitizedValue.status }); } else { throw new Error(`Validation failed for User.status: expected final type 'string' but got '${typeof sanitizedValue.status}'`); } }
    else {
    }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'status', rule: 'required', message: `is a required property.`, value: sanitizedValue.status }); } else { throw new Error(`Validation failed for User.status: is a required property.`); }
  }

  // --- Validation for property: userClass ---
  if (sanitizedValue.hasOwnProperty('userClass')) {
    if (typeof sanitizedValue.userClass !== 'string') { if (isVerbose) { errors.push({ property: 'userClass', rule: 'type', message: `expected final type 'string' but got '${typeof sanitizedValue.userClass}'`, value: sanitizedValue.userClass }); } else { throw new Error(`Validation failed for User.userClass: expected final type 'string' but got '${typeof sanitizedValue.userClass}'`); } }
    else {
      if (!String(sanitizedValue.userClass).startsWith('class-')) { if (isVerbose) { errors.push({ property: 'userClass', rule: 'startsWith', message: `must start with 'class-'.`, value: sanitizedValue.userClass }); } else { throw new Error(`Validation failed for User.userClass: must start with 'class-'.`); } }
    }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'userClass', rule: 'required', message: `is a required property.`, value: sanitizedValue.userClass }); } else { throw new Error(`Validation failed for User.userClass: is a required property.`); }
  }

  if (isVerbose) return { isValid: errors.length === 0, errors, value: errors.length === 0 ? sanitizedValue : undefined };
  return true;
}
function _validateSeller(data, options = {}) {
  const isVerbose = options.verbose === true;
  const errors = [];
  if (typeof data !== 'object' || data === null) {
    const message = 'Seller must be a non-null object.';
    if (isVerbose) return { isValid: false, errors: [{ property: null, rule: 'type', message }], value: undefined };
    else throw new Error(message);
  }

  const sanitizedValue = { ...data };

  // --- Validation for property: sellerId ---
  if (sanitizedValue.hasOwnProperty('sellerId')) {
    const parsedInt = parseInt(sanitizedValue.sellerId, 10);
    if (!Number.isNaN(parsedInt)) { sanitizedValue.sellerId = parsedInt; } else { if (isVerbose) { errors.push({ property: 'sellerId', rule: 'transform', message: `failed to transform to integer (resulted in NaN).`, value: sanitizedValue.sellerId }); } else { throw new Error(`Validation failed for Seller.sellerId: failed to transform to integer (resulted in NaN).`); } }
    if (typeof sanitizedValue.sellerId !== 'number') { if (isVerbose) { errors.push({ property: 'sellerId', rule: 'type', message: `expected final type 'number' but got '${typeof sanitizedValue.sellerId}'`, value: sanitizedValue.sellerId }); } else { throw new Error(`Validation failed for Seller.sellerId: expected final type 'number' but got '${typeof sanitizedValue.sellerId}'`); } }
    else {
    }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'sellerId', rule: 'required', message: `is a required property.`, value: sanitizedValue.sellerId }); } else { throw new Error(`Validation failed for Seller.sellerId: is a required property.`); }
  }

  // --- Validation for property: companyName ---
  if (sanitizedValue.hasOwnProperty('companyName')) {
    if (typeof sanitizedValue.companyName !== 'string') { if (isVerbose) { errors.push({ property: 'companyName', rule: 'type', message: `expected final type 'string' but got '${typeof sanitizedValue.companyName}'`, value: sanitizedValue.companyName }); } else { throw new Error(`Validation failed for Seller.companyName: expected final type 'string' but got '${typeof sanitizedValue.companyName}'`); } }
    else {
    }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'companyName', rule: 'required', message: `is a required property.`, value: sanitizedValue.companyName }); } else { throw new Error(`Validation failed for Seller.companyName: is a required property.`); }
  }

  // --- Validation for property: isVerified ---
  if (sanitizedValue.hasOwnProperty('isVerified')) {
    if (typeof sanitizedValue.isVerified !== 'boolean') { if (isVerbose) { errors.push({ property: 'isVerified', rule: 'type', message: `expected final type 'boolean' but got '${typeof sanitizedValue.isVerified}'`, value: sanitizedValue.isVerified }); } else { throw new Error(`Validation failed for Seller.isVerified: expected final type 'boolean' but got '${typeof sanitizedValue.isVerified}'`); } }
    else {
    }
  } else if (!true) {
    if (isVerbose) { errors.push({ property: 'isVerified', rule: 'required', message: `is a required property.`, value: sanitizedValue.isVerified }); } else { throw new Error(`Validation failed for Seller.isVerified: is a required property.`); }
  }

  if (isVerbose) return { isValid: errors.length === 0, errors, value: errors.length === 0 ? sanitizedValue : undefined };
  return true;
}
function _validateProduct(data, options = {}) {
  const isVerbose = options.verbose === true;
  const errors = [];
  if (typeof data !== 'object' || data === null) {
    const message = 'Product must be a non-null object.';
    if (isVerbose) return { isValid: false, errors: [{ property: null, rule: 'type', message }], value: undefined };
    else throw new Error(message);
  }

  const sanitizedValue = { ...data };

  // --- Validation for property: productId ---
  if (sanitizedValue.hasOwnProperty('productId')) {
    if (typeof sanitizedValue.productId !== 'string') { if (isVerbose) { errors.push({ property: 'productId', rule: 'type', message: `expected final type 'string' but got '${typeof sanitizedValue.productId}'`, value: sanitizedValue.productId }); } else { throw new Error(`Validation failed for Product.productId: expected final type 'string' but got '${typeof sanitizedValue.productId}'`); } }
    else {
      if (!String(sanitizedValue.productId).startsWith('prod_')) { if (isVerbose) { errors.push({ property: 'productId', rule: 'startsWith', message: `must start with 'prod_'.`, value: sanitizedValue.productId }); } else { throw new Error(`Validation failed for Product.productId: must start with 'prod_'.`); } }
    }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'productId', rule: 'required', message: `is a required property.`, value: sanitizedValue.productId }); } else { throw new Error(`Validation failed for Product.productId: is a required property.`); }
  }

  // --- Validation for property: price ---
  if (sanitizedValue.hasOwnProperty('price')) {
    if (typeof sanitizedValue.price !== 'number') { if (isVerbose) { errors.push({ property: 'price', rule: 'type', message: `expected final type 'number' but got '${typeof sanitizedValue.price}'`, value: sanitizedValue.price }); } else { throw new Error(`Validation failed for Product.price: expected final type 'number' but got '${typeof sanitizedValue.price}'`); } }
    else {
      if (sanitizedValue.price < 0) { if (isVerbose) { errors.push({ property: 'price', rule: 'min', message: `must be at least 0.`, value: sanitizedValue.price }); } else { throw new Error(`Validation failed for Product.price: must be at least 0.`); } }
    }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'price', rule: 'required', message: `is a required property.`, value: sanitizedValue.price }); } else { throw new Error(`Validation failed for Product.price: is a required property.`); }
  }

  // --- Validation for property: seller ---
  if (sanitizedValue.hasOwnProperty('seller')) {
    try { validateSeller(sanitizedValue.seller, options); } catch (e) { if (!isVerbose) { throw new Error(`Validation failed for Product.seller: ` + e.message); } else { errors.push({ property: 'seller', rule: 'nested', message: e.message }); } }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'seller', rule: 'required', message: `is a required property.`, value: sanitizedValue.seller }); } else { throw new Error(`Validation failed for Product.seller: is a required property.`); }
  }

  // --- Validation for property: tags ---
  if (sanitizedValue.hasOwnProperty('tags')) {
    if (!Array.isArray(sanitizedValue.tags)) { if (isVerbose) { errors.push({ property: 'tags', rule: 'type', message: `expected final type 'array' but got '${typeof sanitizedValue.tags}'`, value: sanitizedValue.tags }); } else { throw new Error(`Validation failed for Product.tags: expected final type 'array' but got '${typeof sanitizedValue.tags}'`); } }
    else {
      if (sanitizedValue.tags.length < 1) { if (isVerbose) { errors.push({ property: 'tags', rule: 'minLength', message: `must contain at least 1 items.`, value: sanitizedValue.tags }); } else { throw new Error(`Validation failed for Product.tags: must contain at least 1 items.`); } }
      for (let i = 0; i < sanitizedValue.tags.length; i++) {
        const item = sanitizedValue.tags[i];
        if (typeof item !== 'string' || item.length < 2) { if (isVerbose) { errors.push({ property: 'tags', rule: 'itemValidation', message: `item at index ${i} is invalid.`, value: sanitizedValue.tags }); } else { throw new Error(`Validation failed for Product.tags: item at index ${i} is invalid.`); } }
      }
    }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'tags', rule: 'required', message: `is a required property.`, value: sanitizedValue.tags }); } else { throw new Error(`Validation failed for Product.tags: is a required property.`); }
  }

  if (isVerbose) return { isValid: errors.length === 0, errors, value: errors.length === 0 ? sanitizedValue : undefined };
  return true;
}
validateUser = _validateUser;
validateSeller = _validateSeller;
validateProduct = _validateProduct;
export { validateUser, validateSeller, validateProduct };
