// THIS FILE IS AUTO-GENERATED BY ASSERTIFY. DO NOT EDIT.
// Generated at 2025-06-16T15:18:45.142Z

export function validateUser(data, options = {}) {
  const isVerbose = options.verbose === true;
  const errors = [];

  if (typeof data !== 'object' || data === null) {
    const message = 'User must be a non-null object.';
    if (isVerbose) return { isValid: false, errors: [{ property: null, rule: 'type', message }], value: undefined };
    else throw new Error(message);
  }

  if (data.hasOwnProperty('id')) {
    if (typeof data.id !== 'number') { if (isVerbose) { errors.push({ property: 'id', rule: 'type', message: `expected type 'number' but got '${typeof data.id}'`, value: data.id }); } else { throw new Error(`Validation failed for User.id: expected type 'number' but got '${typeof data.id}'`); } }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'id', rule: 'required', message: `is a required property.`, value: data.id }); } else { throw new Error(`Validation failed for User.id: is a required property.`); }
  }

  if (data.hasOwnProperty('username')) {
    if (typeof data.username !== 'string') { if (isVerbose) { errors.push({ property: 'username', rule: 'type', message: `expected type 'string' but got '${typeof data.username}'`, value: data.username }); } else { throw new Error(`Validation failed for User.username: expected type 'string' but got '${typeof data.username}'`); } }
    if (data.username.length < 3) { if (isVerbose) { errors.push({ property: 'username', rule: 'minLength', message: `must be at least 3 characters long.`, value: data.username }); } else { throw new Error(`Validation failed for User.username: must be at least 3 characters long.`); } }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'username', rule: 'required', message: `is a required property.`, value: data.username }); } else { throw new Error(`Validation failed for User.username: is a required property.`); }
  }

  if (data.hasOwnProperty('email')) {
    if (typeof data.email !== 'string') { if (isVerbose) { errors.push({ property: 'email', rule: 'type', message: `expected type 'string' but got '${typeof data.email}'`, value: data.email }); } else { throw new Error(`Validation failed for User.email: expected type 'string' but got '${typeof data.email}'`); } }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'email', rule: 'required', message: `is a required property.`, value: data.email }); } else { throw new Error(`Validation failed for User.email: is a required property.`); }
  }

  if (data.hasOwnProperty('age')) {
    if (typeof data.age !== 'number') { if (isVerbose) { errors.push({ property: 'age', rule: 'type', message: `expected type 'number' but got '${typeof data.age}'`, value: data.age }); } else { throw new Error(`Validation failed for User.age: expected type 'number' but got '${typeof data.age}'`); } }
    if (data.age < 18) { if (isVerbose) { errors.push({ property: 'age', rule: 'min', message: `must be at least 18.`, value: data.age }); } else { throw new Error(`Validation failed for User.age: must be at least 18.`); } }
  } else if (!true) {
    if (isVerbose) { errors.push({ property: 'age', rule: 'required', message: `is a required property.`, value: data.age }); } else { throw new Error(`Validation failed for User.age: is a required property.`); }
  }

  if (data.hasOwnProperty('status')) {
    if (typeof data.status !== 'string') { if (isVerbose) { errors.push({ property: 'status', rule: 'type', message: `expected type 'string' but got '${typeof data.status}'`, value: data.status }); } else { throw new Error(`Validation failed for User.status: expected type 'string' but got '${typeof data.status}'`); } }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'status', rule: 'required', message: `is a required property.`, value: data.status }); } else { throw new Error(`Validation failed for User.status: is a required property.`); }
  }

  if (data.hasOwnProperty('userClass')) {
    if (typeof data.userClass !== 'string') { if (isVerbose) { errors.push({ property: 'userClass', rule: 'type', message: `expected type 'string' but got '${typeof data.userClass}'`, value: data.userClass }); } else { throw new Error(`Validation failed for User.userClass: expected type 'string' but got '${typeof data.userClass}'`); } }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'userClass', rule: 'required', message: `is a required property.`, value: data.userClass }); } else { throw new Error(`Validation failed for User.userClass: is a required property.`); }
  }

  if (isVerbose) return { isValid: errors.length === 0, errors, value: data };
  return true;
}
export function validateSeller(data, options = {}) {
  const isVerbose = options.verbose === true;
  const errors = [];

  if (typeof data !== 'object' || data === null) {
    const message = 'Seller must be a non-null object.';
    if (isVerbose) return { isValid: false, errors: [{ property: null, rule: 'type', message }], value: undefined };
    else throw new Error(message);
  }

  if (data.hasOwnProperty('sellerId')) {
    if (typeof data.sellerId !== 'string') { if (isVerbose) { errors.push({ property: 'sellerId', rule: 'type', message: `expected type 'string' but got '${typeof data.sellerId}'`, value: data.sellerId }); } else { throw new Error(`Validation failed for Seller.sellerId: expected type 'string' but got '${typeof data.sellerId}'`); } }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'sellerId', rule: 'required', message: `is a required property.`, value: data.sellerId }); } else { throw new Error(`Validation failed for Seller.sellerId: is a required property.`); }
  }

  if (data.hasOwnProperty('companyName')) {
    if (typeof data.companyName !== 'string') { if (isVerbose) { errors.push({ property: 'companyName', rule: 'type', message: `expected type 'string' but got '${typeof data.companyName}'`, value: data.companyName }); } else { throw new Error(`Validation failed for Seller.companyName: expected type 'string' but got '${typeof data.companyName}'`); } }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'companyName', rule: 'required', message: `is a required property.`, value: data.companyName }); } else { throw new Error(`Validation failed for Seller.companyName: is a required property.`); }
  }

  if (data.hasOwnProperty('isVerified')) {
    if (typeof data.isVerified !== 'boolean') { if (isVerbose) { errors.push({ property: 'isVerified', rule: 'type', message: `expected type 'boolean' but got '${typeof data.isVerified}'`, value: data.isVerified }); } else { throw new Error(`Validation failed for Seller.isVerified: expected type 'boolean' but got '${typeof data.isVerified}'`); } }
  } else if (!true) {
    if (isVerbose) { errors.push({ property: 'isVerified', rule: 'required', message: `is a required property.`, value: data.isVerified }); } else { throw new Error(`Validation failed for Seller.isVerified: is a required property.`); }
  }

  if (isVerbose) return { isValid: errors.length === 0, errors, value: data };
  return true;
}
export function validateProduct(data, options = {}) {
  const isVerbose = options.verbose === true;
  const errors = [];

  if (typeof data !== 'object' || data === null) {
    const message = 'Product must be a non-null object.';
    if (isVerbose) return { isValid: false, errors: [{ property: null, rule: 'type', message }], value: undefined };
    else throw new Error(message);
  }

  if (data.hasOwnProperty('productId')) {
    if (typeof data.productId !== 'string') { if (isVerbose) { errors.push({ property: 'productId', rule: 'type', message: `expected type 'string' but got '${typeof data.productId}'`, value: data.productId }); } else { throw new Error(`Validation failed for Product.productId: expected type 'string' but got '${typeof data.productId}'`); } }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'productId', rule: 'required', message: `is a required property.`, value: data.productId }); } else { throw new Error(`Validation failed for Product.productId: is a required property.`); }
  }

  if (data.hasOwnProperty('price')) {
    if (typeof data.price !== 'number') { if (isVerbose) { errors.push({ property: 'price', rule: 'type', message: `expected type 'number' but got '${typeof data.price}'`, value: data.price }); } else { throw new Error(`Validation failed for Product.price: expected type 'number' but got '${typeof data.price}'`); } }
    if (data.price < 0) { if (isVerbose) { errors.push({ property: 'price', rule: 'min', message: `must be at least 0.`, value: data.price }); } else { throw new Error(`Validation failed for Product.price: must be at least 0.`); } }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'price', rule: 'required', message: `is a required property.`, value: data.price }); } else { throw new Error(`Validation failed for Product.price: is a required property.`); }
  }

  if (data.hasOwnProperty('seller')) {
    try { validateSeller(data.seller, options); } catch (e) { if (!isVerbose) { throw new Error(`Validation failed for Product.seller: ` + e.message); } else { errors.push({ property: 'seller', rule: 'nested', message: e.message }); } }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'seller', rule: 'required', message: `is a required property.`, value: data.seller }); } else { throw new Error(`Validation failed for Product.seller: is a required property.`); }
  }

  if (data.hasOwnProperty('tags')) {
    if (!Array.isArray(data.tags)) { if (isVerbose) { errors.push({ property: 'tags', rule: 'type', message: `expected type 'array' but got '${typeof data.tags}'`, value: data.tags }); } else { throw new Error(`Validation failed for Product.tags: expected type 'array' but got '${typeof data.tags}'`); } }
  } else if (!false) {
    if (isVerbose) { errors.push({ property: 'tags', rule: 'required', message: `is a required property.`, value: data.tags }); } else { throw new Error(`Validation failed for Product.tags: is a required property.`); }
  }

  if (isVerbose) return { isValid: errors.length === 0, errors, value: data };
  return true;
}
