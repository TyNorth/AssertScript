// THIS FILE IS AUTO-GENERATED BY ASSERTIFY. DO NOT EDIT.
// Generated at 2025-06-16T05:33:34.761Z

export function validateUser(data) {
  if (typeof data !== 'object' || data === null) {
    throw new Error('User must be a non-null object.');
  }

  if (data.hasOwnProperty('id')) {
    if (typeof data.id !== 'undefined') { throw new Error("Validation failed for User.id: expected type 'undefined' but got '" + (typeof data.id) + "'."); }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'id'.");
  }

  if (data.hasOwnProperty('username')) {
    if (typeof data.username !== 'undefined') { throw new Error("Validation failed for User.username: expected type 'undefined' but got '" + (typeof data.username) + "'."); }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'username'.");
  }

  if (data.hasOwnProperty('email')) {
    if (typeof data.email !== 'undefined') { throw new Error("Validation failed for User.email: expected type 'undefined' but got '" + (typeof data.email) + "'."); }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'email'.");
  }

  if (data.hasOwnProperty('isAdmin')) {
    if (typeof data.isAdmin !== 'undefined') { throw new Error("Validation failed for User.isAdmin: expected type 'undefined' but got '" + (typeof data.isAdmin) + "'."); }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'isAdmin'.");
  }

  if (data.hasOwnProperty('bio')) {
    if (typeof data.bio !== 'undefined') { throw new Error("Validation failed for User.bio: expected type 'undefined' but got '" + (typeof data.bio) + "'."); }
  } else if (!true) {
    throw new Error("Validation failed for User: missing required property 'bio'.");
  }

  return true;
}
export function validateSeller(data) {
  if (typeof data !== 'object' || data === null) {
    throw new Error('Seller must be a non-null object.');
  }

  if (data.hasOwnProperty('sellerId')) {
    if (typeof data.sellerId !== 'undefined') { throw new Error("Validation failed for Seller.sellerId: expected type 'undefined' but got '" + (typeof data.sellerId) + "'."); }
  } else if (!false) {
    throw new Error("Validation failed for Seller: missing required property 'sellerId'.");
  }

  if (data.hasOwnProperty('companyName')) {
    if (typeof data.companyName !== 'undefined') { throw new Error("Validation failed for Seller.companyName: expected type 'undefined' but got '" + (typeof data.companyName) + "'."); }
  } else if (!false) {
    throw new Error("Validation failed for Seller: missing required property 'companyName'.");
  }

  if (data.hasOwnProperty('isVerified')) {
    if (typeof data.isVerified !== 'undefined') { throw new Error("Validation failed for Seller.isVerified: expected type 'undefined' but got '" + (typeof data.isVerified) + "'."); }
  } else if (!true) {
    throw new Error("Validation failed for Seller: missing required property 'isVerified'.");
  }

  return true;
}
export function validateProduct(data) {
  if (typeof data !== 'object' || data === null) {
    throw new Error('Product must be a non-null object.');
  }

  if (data.hasOwnProperty('productId')) {
    if (typeof data.productId !== 'undefined') { throw new Error("Validation failed for Product.productId: expected type 'undefined' but got '" + (typeof data.productId) + "'."); }
  } else if (!false) {
    throw new Error("Validation failed for Product: missing required property 'productId'.");
  }

  if (data.hasOwnProperty('price')) {
    if (typeof data.price !== 'undefined') { throw new Error("Validation failed for Product.price: expected type 'undefined' but got '" + (typeof data.price) + "'."); }
  } else if (!false) {
    throw new Error("Validation failed for Product: missing required property 'price'.");
  }

  if (data.hasOwnProperty('seller')) {
    if (typeof data.seller !== 'undefined') { throw new Error("Validation failed for Product.seller: expected type 'undefined' but got '" + (typeof data.seller) + "'."); }
  } else if (!false) {
    throw new Error("Validation failed for Product: missing required property 'seller'.");
  }

  return true;
}
export function validateReview(data) {
  if (typeof data !== 'object' || data === null) {
    throw new Error('Review must be a non-null object.');
  }

  if (data.hasOwnProperty('rating')) {
    if (typeof data.rating !== 'undefined') { throw new Error("Validation failed for Review.rating: expected type 'undefined' but got '" + (typeof data.rating) + "'."); }
  } else if (!false) {
    throw new Error("Validation failed for Review: missing required property 'rating'.");
  }

  if (data.hasOwnProperty('comment')) {
    if (typeof data.comment !== 'undefined') { throw new Error("Validation failed for Review.comment: expected type 'undefined' but got '" + (typeof data.comment) + "'."); }
  } else if (!true) {
    throw new Error("Validation failed for Review: missing required property 'comment'.");
  }

  return true;
}
