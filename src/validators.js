// THIS FILE IS AUTO-GENERATED BY ASSERTIFY. DO NOT EDIT.
// Generated at 2025-06-16T03:27:39.917Z

export function validateUser(data) {
  if (typeof data !== 'object' || data === null) {
    throw new Error('User must be a non-null object.');
  }

  if (data.hasOwnProperty('id')) {
    if (typeof data.id !== 'number') {
      throw new Error("Validation failed for User.id: expected type 'number' but got '" + (typeof data.id) + "'.");
    }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'id'.");
  }

  return true;
}
export function validateUser(data) {
  if (typeof data !== 'object' || data === null) {
    throw new Error('User must be a non-null object.');
  }

  if (data.hasOwnProperty('id')) {
    if (typeof data.id !== 'number') {
      throw new Error("Validation failed for User.id: expected type 'number' but got '" + (typeof data.id) + "'.");
    }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'id'.");
  }

  return true;
}
  if (data.hasOwnProperty('username')) {
    if (typeof data.username !== 'string') {
      throw new Error("Validation failed for User.username: expected type 'string' but got '" + (typeof data.username) + "'.");
    }
    if (data.username.length < 3) {
      throw new Error("Validation failed for User.username: must be at least 3 characters long.");
    }
    if (data.username.length > 20) {
      throw new Error("Validation failed for User.username: must be no more than 20 characters long.");
    }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'username'.");
  }

  return true;
}
export function validateUser(data) {
  if (typeof data !== 'object' || data === null) {
    throw new Error('User must be a non-null object.');
  }

  if (data.hasOwnProperty('id')) {
    if (typeof data.id !== 'number') {
      throw new Error("Validation failed for User.id: expected type 'number' but got '" + (typeof data.id) + "'.");
    }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'id'.");
  }

  return true;
}
  if (data.hasOwnProperty('username')) {
    if (typeof data.username !== 'string') {
      throw new Error("Validation failed for User.username: expected type 'string' but got '" + (typeof data.username) + "'.");
    }
    if (data.username.length < 3) {
      throw new Error("Validation failed for User.username: must be at least 3 characters long.");
    }
    if (data.username.length > 20) {
      throw new Error("Validation failed for User.username: must be no more than 20 characters long.");
    }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'username'.");
  }

  return true;
}
  if (data.hasOwnProperty('email')) {
    if (typeof data.email !== 'string') {
      throw new Error("Validation failed for User.email: expected type 'string' but got '" + (typeof data.email) + "'.");
    }
    if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(data.email)) {
      throw new Error("Validation failed for User.email: does not match required format.");
    }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'email'.");
  }

  return true;
}
export function validateUser(data) {
  if (typeof data !== 'object' || data === null) {
    throw new Error('User must be a non-null object.');
  }

  if (data.hasOwnProperty('id')) {
    if (typeof data.id !== 'number') {
      throw new Error("Validation failed for User.id: expected type 'number' but got '" + (typeof data.id) + "'.");
    }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'id'.");
  }

  return true;
}
  if (data.hasOwnProperty('username')) {
    if (typeof data.username !== 'string') {
      throw new Error("Validation failed for User.username: expected type 'string' but got '" + (typeof data.username) + "'.");
    }
    if (data.username.length < 3) {
      throw new Error("Validation failed for User.username: must be at least 3 characters long.");
    }
    if (data.username.length > 20) {
      throw new Error("Validation failed for User.username: must be no more than 20 characters long.");
    }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'username'.");
  }

  return true;
}
  if (data.hasOwnProperty('email')) {
    if (typeof data.email !== 'string') {
      throw new Error("Validation failed for User.email: expected type 'string' but got '" + (typeof data.email) + "'.");
    }
    if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(data.email)) {
      throw new Error("Validation failed for User.email: does not match required format.");
    }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'email'.");
  }

  return true;
}
  if (data.hasOwnProperty('age')) {
    if (typeof data.age !== 'number') {
      throw new Error("Validation failed for User.age: expected type 'number' but got '" + (typeof data.age) + "'.");
    }
    if (data.age < 18) {
      throw new Error("Validation failed for User.age: must be at least 18.");
    }
  } else if (!true) {
    throw new Error("Validation failed for User: missing required property 'age'.");
  }

  return true;
}
export function validateUser(data) {
  if (typeof data !== 'object' || data === null) {
    throw new Error('User must be a non-null object.');
  }

  if (data.hasOwnProperty('id')) {
    if (typeof data.id !== 'number') {
      throw new Error("Validation failed for User.id: expected type 'number' but got '" + (typeof data.id) + "'.");
    }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'id'.");
  }

  return true;
}
  if (data.hasOwnProperty('username')) {
    if (typeof data.username !== 'string') {
      throw new Error("Validation failed for User.username: expected type 'string' but got '" + (typeof data.username) + "'.");
    }
    if (data.username.length < 3) {
      throw new Error("Validation failed for User.username: must be at least 3 characters long.");
    }
    if (data.username.length > 20) {
      throw new Error("Validation failed for User.username: must be no more than 20 characters long.");
    }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'username'.");
  }

  return true;
}
  if (data.hasOwnProperty('email')) {
    if (typeof data.email !== 'string') {
      throw new Error("Validation failed for User.email: expected type 'string' but got '" + (typeof data.email) + "'.");
    }
    if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(data.email)) {
      throw new Error("Validation failed for User.email: does not match required format.");
    }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'email'.");
  }

  return true;
}
  if (data.hasOwnProperty('age')) {
    if (typeof data.age !== 'number') {
      throw new Error("Validation failed for User.age: expected type 'number' but got '" + (typeof data.age) + "'.");
    }
    if (data.age < 18) {
      throw new Error("Validation failed for User.age: must be at least 18.");
    }
  } else if (!true) {
    throw new Error("Validation failed for User: missing required property 'age'.");
  }

  return true;
}
  if (data.hasOwnProperty('status')) {
    if (typeof data.status !== 'string') {
      throw new Error("Validation failed for User.status: expected type 'string' but got '" + (typeof data.status) + "'.");
    }
    if (!["active","inactive","pending"].includes(data.status)) {
      throw new Error("Validation failed for User.status: must be one of [active, inactive, pending].");
    }
  } else if (!false) {
    throw new Error("Validation failed for User: missing required property 'status'.");
  }

  return true;
}
export function validateSeller(data) {
  if (typeof data !== 'object' || data === null) {
    throw new Error('Seller must be a non-null object.');
  }

  if (data.hasOwnProperty('sellerId')) {
    if (typeof data.sellerId !== 'number') {
      throw new Error("Validation failed for Seller.sellerId: expected type 'number' but got '" + (typeof data.sellerId) + "'.");
    }
  } else if (!false) {
    throw new Error("Validation failed for Seller: missing required property 'sellerId'.");
  }

  return true;
}
export function validateSeller(data) {
  if (typeof data !== 'object' || data === null) {
    throw new Error('Seller must be a non-null object.');
  }

  if (data.hasOwnProperty('sellerId')) {
    if (typeof data.sellerId !== 'number') {
      throw new Error("Validation failed for Seller.sellerId: expected type 'number' but got '" + (typeof data.sellerId) + "'.");
    }
  } else if (!false) {
    throw new Error("Validation failed for Seller: missing required property 'sellerId'.");
  }

  return true;
}
  if (data.hasOwnProperty('companyName')) {
    if (typeof data.companyName !== 'string') {
      throw new Error("Validation failed for Seller.companyName: expected type 'string' but got '" + (typeof data.companyName) + "'.");
    }
  } else if (!false) {
    throw new Error("Validation failed for Seller: missing required property 'companyName'.");
  }

  return true;
}
export function validateSeller(data) {
  if (typeof data !== 'object' || data === null) {
    throw new Error('Seller must be a non-null object.');
  }

  if (data.hasOwnProperty('sellerId')) {
    if (typeof data.sellerId !== 'number') {
      throw new Error("Validation failed for Seller.sellerId: expected type 'number' but got '" + (typeof data.sellerId) + "'.");
    }
  } else if (!false) {
    throw new Error("Validation failed for Seller: missing required property 'sellerId'.");
  }

  return true;
}
  if (data.hasOwnProperty('companyName')) {
    if (typeof data.companyName !== 'string') {
      throw new Error("Validation failed for Seller.companyName: expected type 'string' but got '" + (typeof data.companyName) + "'.");
    }
  } else if (!false) {
    throw new Error("Validation failed for Seller: missing required property 'companyName'.");
  }

  return true;
}
  if (data.hasOwnProperty('isVerified')) {
    if (typeof data.isVerified !== 'boolean') {
      throw new Error("Validation failed for Seller.isVerified: expected type 'boolean' but got '" + (typeof data.isVerified) + "'.");
    }
  } else if (!true) {
    throw new Error("Validation failed for Seller: missing required property 'isVerified'.");
  }

  return true;
}
export function validateProduct(data) {
  if (typeof data !== 'object' || data === null) {
    throw new Error('Product must be a non-null object.');
  }

  if (data.hasOwnProperty('productId')) {
    if (typeof data.productId !== 'string') {
      throw new Error("Validation failed for Product.productId: expected type 'string' but got '" + (typeof data.productId) + "'.");
    }
  } else if (!false) {
    throw new Error("Validation failed for Product: missing required property 'productId'.");
  }

  return true;
}
export function validateProduct(data) {
  if (typeof data !== 'object' || data === null) {
    throw new Error('Product must be a non-null object.');
  }

  if (data.hasOwnProperty('productId')) {
    if (typeof data.productId !== 'string') {
      throw new Error("Validation failed for Product.productId: expected type 'string' but got '" + (typeof data.productId) + "'.");
    }
  } else if (!false) {
    throw new Error("Validation failed for Product: missing required property 'productId'.");
  }

  return true;
}
  if (data.hasOwnProperty('price')) {
    if (typeof data.price !== 'number') {
      throw new Error("Validation failed for Product.price: expected type 'number' but got '" + (typeof data.price) + "'.");
    }
    if (data.price < 0) {
      throw new Error("Validation failed for Product.price: must be at least 0.");
    }
  } else if (!false) {
    throw new Error("Validation failed for Product: missing required property 'price'.");
  }

  return true;
}
export function validateProduct(data) {
  if (typeof data !== 'object' || data === null) {
    throw new Error('Product must be a non-null object.');
  }

  if (data.hasOwnProperty('productId')) {
    if (typeof data.productId !== 'string') {
      throw new Error("Validation failed for Product.productId: expected type 'string' but got '" + (typeof data.productId) + "'.");
    }
  } else if (!false) {
    throw new Error("Validation failed for Product: missing required property 'productId'.");
  }

  return true;
}
  if (data.hasOwnProperty('price')) {
    if (typeof data.price !== 'number') {
      throw new Error("Validation failed for Product.price: expected type 'number' but got '" + (typeof data.price) + "'.");
    }
    if (data.price < 0) {
      throw new Error("Validation failed for Product.price: must be at least 0.");
    }
  } else if (!false) {
    throw new Error("Validation failed for Product: missing required property 'price'.");
  }

  return true;
}
  if (data.hasOwnProperty('seller')) {
    try {
      validateSeller(data.seller);
    } catch (e) {
      throw new Error("Validation failed for Product.seller: " + e.message);
    }
  } else if (!false) {
    throw new Error("Validation failed for Product: missing required property 'seller'.");
  }

  return true;
}
