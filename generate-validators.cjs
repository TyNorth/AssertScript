// Using CommonJS 'require' because this is a Node.js script.
const fs = require('fs')
const path = require('path')

// Define the file paths relative to the project root.
const typesFilePath = path.join(__dirname, 'types.json')
const outputFilePath = path.join(__dirname, 'src/validators.js') // Output directly to the 'src' folder!

console.log('Starting Assertify code generation...')

try {
  // --- 1. Read and Parse the Schema ---
  console.log(`Reading schema from: ${typesFilePath}`)
  const typesFileContent = fs.readFileSync(typesFilePath, 'utf8')
  const schemas = JSON.parse(typesFileContent)

  let outputCode = `// THIS FILE IS AUTO-GENERATED BY ASSERTIFY. DO NOT EDIT.\n`
  outputCode += `// Generated at ${new Date().toISOString()}\n\n`

  // --- 2. Generate Validator Functions ---
  for (const typeName in schemas) {
    console.log(`- Generating validator for type: ${typeName}`)
    const schema = schemas[typeName]
    const functionName = `validate${typeName}`

    let functionBody = `export function ${functionName}(data) {\n`
    functionBody += `  if (typeof data !== 'object' || data === null) {\n`
    functionBody += `    throw new Error('${typeName} must be a non-null object.');\n  }\n\n`

    for (let key in schema) {
      const type = schema[key]
      const isOptional = key.endsWith('?')
      const propertyName = isOptional ? key.slice(0, -1) : key

      console.log(`-  Processing property: ${propertyName} (${type}, Optional: ${isOptional})`)

      let validationLogic
      // NEW: Check if the type is another schema we have defined.
      if (schemas[type]) {
        // It's a nested custom type! Generate a call to its own validator.
        validationLogic = `    try {\n`
        validationLogic += `      validate${type}(data.${propertyName});\n`
        validationLogic += `    } catch (e) {\n`
        validationLogic += `      throw new Error("Validation failed for ${typeName}.${propertyName}: " + e.message);\n`
        validationLogic += `    }\n`
      } else {
        // It's a primitive type. Generate the standard typeof check.
        const typeCheck =
          type === 'array'
            ? `!Array.isArray(data.${propertyName})`
            : `typeof data.${propertyName} !== '${type}'`
        validationLogic = `    if (${typeCheck}) {\n`
        validationLogic += `      throw new Error("Validation failed for ${typeName}.${propertyName}: expected type '${type}' but got '" + (typeof data.${propertyName}) + "'.");\n`
        validationLogic += `    }\n`
      }

      // This part remains mostly the same, just wrapping the new logic
      functionBody += `  if (data.hasOwnProperty('${propertyName}')) {\n`
      functionBody += `    // If property exists, validate it\n`
      functionBody += validationLogic // Inject the correct logic here
      functionBody += `  } else if (!${isOptional}) {\n`
      functionBody += `    // If property is missing AND it's not optional, throw an error\n`
      functionBody += `    throw new Error("Validation failed for ${typeName}: missing required property '${propertyName}'.");\n`
      functionBody += `  }\n\n`
    }

    functionBody += `  return true;\n`
    functionBody += `}\n`
    outputCode += functionBody
  }

  // --- 3. Write the Output File ---
  fs.writeFileSync(outputFilePath, outputCode, 'utf8')
  console.log(`✅ Success! Validators written to: ${outputFilePath}`)
} catch (error) {
  console.error('❌ Assertify Error: Generation failed.', error)
  process.exit(1) // Exit with an error code
}
